/* autogenerated by Processing revision 1293 on 2024-05-10 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import ddf.minim.*;
import gifAnimation.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Proyecto_Videojuego_Algoritmia_2 extends PApplet {


Minim minim;
AudioPlayer[] musica;

//Libreria de gifs animados

//Creacion de la variable menugif para la animacion de entrada.
Gif menugif, studios, portalx, mmnopressed, mmstarthover, mmcontrolhover, mmcredithover, creditmenu, creditmenubackhover, controlmenu, controlmenubackhover,
  diedscreen, winscreen, level1transition, level2transition, level3transition, finaleveltransition;
final static int normal=0;
final static int derecha =1;
final static int izquierda =2;
float der_margen = 400;
final static float izq_margen = 350;
final static float ver_margen = 40;
final static float gravedad = 0.6f;
final static float salto = 14;
final static float saltodoble = 9;
float vel= 5;
final static float size_sprite = 32;
float vistaP_x = 0, posmouseX;
float vistaP_y = 0, posmouseY;
boolean menu= true, juego= false, doblesalto= false,
  lvl0= true, lvl1= false, lvl2= false, lvloculto= false, lvlzombies= false,
  escenastart= false, escenastudios=true, escenamainmenu= false, escenacontrols= false,
  escenacredits= false, escenadied= false, escenawin= false, stopwinscreen=false, scenecambiolvl1= true, scenecambiolvl2= false, scenecambiolvl3=false,
  scenecambiolvlfinal= false, swdaño, sceneselectmode= false;
PImage[] personaje1, collected;
PImage cursornormal, cursorhover, youdiedscreen, dscreenexithov, dscreenreshov, selectmode, normalmodehover,smbackhover;
ArrayList<Sprite> plataforma, coin, lava, enemigo;
JugadorXander jugxander;
Informacion info;
Nivel nivel;
Transicion shift;
ArrayList <Recolectar> juntar;


public void setup() {
  /* size commented out by preprocessor */;
  imageMode(CENTER);
  minim = new Minim(this);
  musica = new AudioPlayer[10];
  musica[0]= minim.loadFile("coinsound.mp3");
  musica[1]= minim.loadFile("Jumpsound.mp3");
  musica[2]= minim.loadFile("Musica16bits.mp3");
  musica[3]= minim.loadFile("winmusic.mp3");
  musica[4]= minim.loadFile("damagesound.mp3");
  musica[5]= minim.loadFile("Lvl1soundtrack.mp3");
  musica[6]= minim.loadFile("Lvl2soundtrack.mp3");
  musica[7]= minim.loadFile("Lvl3soundtrack.mp3");
  musica[8]= minim.loadFile("Diemusic.mp3");
  musica[9]= minim.loadFile("easteregg.mp3");
  surface.setTitle("ChronoLeap");
  cursorhover = loadImage("customcursorhover.png");
  cursornormal = loadImage("customcursor.png");
  cursor(cursornormal);
  dscreenexithov = loadImage("youdiedscreenexithover.png");
  dscreenreshov = loadImage("youdiedscreenrestarthover.png");
  diedscreen= new Gif (this, "youdiedscreen.gif");
  diedscreen.play();
  winscreen= new Gif (this, "WinScreen.gif");
  menugif= new Gif (this, "startgif.gif");
  menugif.loop();
  studios= new Gif (this, "studiosgif.gif");
  studios.play();
  portalx= new Gif (this, "portalx.gif");
  portalx.loop();
  mmstarthover= new Gif (this, "mainmenustarthover.gif");
  mmnopressed= new Gif (this, "mainmenunothingpressed.gif");
  mmcontrolhover= new Gif(this, "mainmenuncontrolhover.gif");
  mmcredithover= new Gif(this, "mainmenucredithover.gif");
  creditmenu = new Gif(this, "Creditsmenu.gif");
  creditmenu.loop();
  creditmenubackhover = new Gif(this, "Creditsmenubackhover.gif");
  creditmenubackhover.loop();
  controlmenu = new Gif(this, "controlmenu.gif");
  controlmenu.loop();
  controlmenubackhover = new Gif(this, "controlmenubackhover.gif");
  controlmenubackhover.loop();
  selectmode = loadImage("SelectMode.png");
  normalmodehover = loadImage("SelectModeNormalhover.png");
  smbackhover = loadImage("SelectModeBackHover.png");
  

  level1transition = new Gif(this, "level1transition.gif");
  level2transition = new Gif(this, "level2transition.gif");
  finaleveltransition = new Gif(this, "finaleveltransition.gif");
  personaje1 = new LeerArchivo(6, 11, "xanderspritesheetcolisionx64.png").getHoja();
  collected = new LeerArchivo(5, 1, "coincollect.png").getHoja();
  juntar = new ArrayList<Recolectar>();
  jugxander = new JugadorXander(personaje1[0]);
  info = new Informacion();
  //*6700 Para probar el siguiente nivel * 70 posicion default
  jugxander.center.x =70;
  jugxander.center.y = 200;
  nivel = new Nivel();
  shift = new Transicion();
}


public void draw() {
  background(0xFFA0A0A0);
  if (!musica[2].isPlaying()) {
    musica[2].setGain(-2);//Bajar volumen
    musica[2].play(1);
  }
  frameRate(60);
  if (escenastudios) {
    //La animacion de JIS studios.
    image (studios, width/2, height/2);
    if (studios.currentFrame() == 36 ) {
      // La animación ha terminado
      println("La animación de studios ha terminado");
      studios.stop();
      escenastudios= false;
      escenastart= true;
    }
  }
  //Una vez terminada la animacion de studios se reproduce la animacion start
  if (escenastart) {
    image (menugif, width/2, height/2);
  } else
    if (escenamainmenu ) {
      image (mmnopressed, width/2, height/2);
      posicionmouse();
    } else if (escenacredits) {
      image (creditmenu, width/2, height/2);
      posicionmouse();
    } else if (escenacontrols) {
      image (controlmenu, width/2, height/2);
      posicionmouse();
    }
  if (sceneselectmode) {
    image (selectmode, width/2, height/2);
    posicionmouse();
  }
  if (escenastart == false && escenastudios == false && escenamainmenu == false && escenacredits== false &&  escenacontrols==false && juego==true || lvlzombies == true) {
    cursor(cursornormal);
    shift.mostrar();
    if (juego) {
      if (!shift.visible)
        jugar();
    }
  }
  //Cuando el jugador agota todas las vidas
  if (jugxander.vidas == 0) {
    musica[5].mute();
    musica[6].mute();
    musica[7].mute();

    if (!musica[8].isPlaying()) {
      musica[8].rewind();
      musica[8].play(1);
    }
    juego = false;
    image(diedscreen, width/2, height/2);
    escenadied = true;
    if (diedscreen.currentFrame()== 14 ) {
      diedscreen.stop();
    }
    posicionmouse();
  }
  //Final del juego
  if (lvl0 == false && lvl2==true && jugxander.center.x > 6725 && jugxander.center.y >= 330) {
    if (!musica[3].isPlaying()) {
      musica[7].mute();
      musica[3].rewind();
      musica[3].play(1);
    }
    //Easter egg, presiona la F al terminar el juego.(Rick Roll)
    if (keyPressed && key == 'f' ) {
      musica[3].mute();
      musica[9].rewind();
      musica[9].play();
    }
    escenawin = true;
    juego= false;
    if (stopwinscreen == false) {
      winscreen.play();
    }
    image(winscreen, width/2, height/2);
    if (winscreen.currentFrame()== 10 ) {
      winscreen.stop();
      stopwinscreen= true;
    }
    info.winscreendata();
    posicionmouse();
  }
}

public void jugar() {
  if (estaEnPlataforma(jugxander, plataforma)) {
    doblesalto= false;
  }
  desplazarEscenario();
  nivel.mostrar();
  jugxander.mostrar();
  jugxander.actualizar();
  resolverColision(jugxander, plataforma);
  reset();
  for (Sprite l : lava) {
    l.mostrar();
    ((Animacion)l).actualizar();
  }
  int total = 0;
  for (Recolectar r : juntar) {
    r.mostrar();
    if (!r.estado)
      total++;
  }
  if (total == juntar.size())
    juntar.removeAll(juntar);
  info.mostrar();
  //Ubicaciones del portal
  if (lvl0) {
    if (scenecambiolvl1) {
      level1transition.play();
      image (level1transition, width/2, height/2);
      if (level1transition.currentFrame()==13) {
        scenecambiolvl1= false;
      }
    }
    image (portalx, 6740, 435);
  }
  if (lvl1) {
    image (portalx, 6740, 435);
  }
  if (lvl2) {
    image (portalx, 6740, 435);
  }
  if (lvloculto) {
    image (portalx, 728, 435);
  }

  //Imagen cuando cambia al nivel 2
  if (scenecambiolvl2) {
    level2transition.play();
    image (level2transition, width/2, height/2);
    if (level2transition.currentFrame()==13) {
      scenecambiolvl2= false;
    }
  }
  //Imagen cuando cambia al nivel final
  if (scenecambiolvlfinal) {
    finaleveltransition.play();
    image (finaleveltransition, width/2, height/2);
    if (finaleveltransition.currentFrame()==13) {
      scenecambiolvlfinal= false;
    }
  }
  //Cambio de nivel
  if (lvl0== true && jugxander.center.x > 6725 && jugxander.center.y >= 330 ) {
    lvl0= false;
    lvl1 = true;
    scenecambiolvl2= true;
    nivel.cambiarNivel1();
    //Cambio de nivel
  } else if (lvl0 == false && lvl1== true && (jugxander.center.x > 6725 && jugxander.center.y >= 330)) {
    lvl1=false;
    lvl2= true;
    scenecambiolvlfinal= true;
    nivel.cambiarNivel2();
    //Sala oculta
  } else if (lvl2==false && lvloculto== true && ((jugxander.center.x > 723 && jugxander.center.x < 749) && jugxander.center.y == 450)) {
    lvl2 = true;
    nivel.cambiarNivel2();
    lvloculto= false;
  }
  if (lvlzombies) {
  }
  System.out.println("Ubicacion X: "+jugxander.center.x);
  System.out.println("Ubicacion Y: "+jugxander.center.y);
}

//Metodo para desplazar el escenario
public void desplazarEscenario() {
  float der_dimension = vistaP_x + width - der_margen;
  if (jugxander.getRight() > der_dimension) {
    if (vistaP_x < 6000)
      vistaP_x += jugxander.getRight()-der_dimension;
  }
  float izq_dimension = vistaP_x + izq_margen;
  if (jugxander.getLeft()< izq_dimension) {
    if (vistaP_x > 0)
      vistaP_x -= izq_dimension -jugxander.getLeft();
  }
  translate(-vistaP_x, -vistaP_y);
}

//Sistema de colisiones
public boolean tocado(Sprite s1, Sprite s2) {
  boolean tocarX = s1.getRight()<= s2.getLeft() || s1.getLeft() >= s2.getRight();
  boolean tocarY = s1.getBottom()<= s2.getTop()|| s1.getTop() >= s2.getBottom();
  if (tocarX || tocarY)
    return false;
  else return true;
}
public ArrayList<Sprite> tocandoLista(Sprite s, ArrayList<Sprite> lista) {
  ArrayList <Sprite> listaTocada = new ArrayList<Sprite>();
  for (Sprite p : lista) {
    if (tocado(s, p))
      listaTocada.add(p);
  }
  return listaTocada;
}

public void resolverColision (Sprite s, ArrayList<Sprite> lista ) {
  s.cambio.y += gravedad;
  s.center.y += s.cambio.y;
  ArrayList<Sprite> colLista = tocandoLista(s, lista);
  if (colLista.size()>0) {
    Sprite colision = colLista.get(0);
    if (s.cambio.y >0)
      s.setBottom(colision.getTop());

    else if (s.cambio.y <0)
      s.setTop(colision.getBottom());
    s.cambio.y = 0;
  }
  s.center.x += s.cambio.x;
  colLista = tocandoLista(s, lista);
  //Bug de colision (Cheat) cambiar el > por un <.
  if (colLista.size()>0) {
    Sprite colision = colLista.get(0);
    if (s.cambio.x > 0)
      s.setRight(colision.getLeft());
    else if (s.cambio.x < 0)
      s.setLeft(colision.getRight());
    s.cambio.x=0;
    if (s.tipo > 0)
      ((Enemigo)s).invertir();
  }
}

public boolean estaEnPlataforma (Sprite s, ArrayList<Sprite> pared) {
  s.center.y += 5;
  ArrayList<Sprite> colLista = tocandoLista(s, pared);
  s.center.y -= 5;
  if (colLista.size() > 0)
    return true;
  else
    return false;
}

public void keyPressed() {
  if (key == 'w' && estaEnPlataforma(jugxander, plataforma)) {
    musica[1].setGain(-5);
    musica[1].play(400);

    jugxander.cambio.y = -salto;
  } else if (key == 'w' && !(estaEnPlataforma(jugxander, plataforma)) && doblesalto==false) {
    musica[1].setGain(-5);
    musica[1].play(500);

    jugxander.cambio.y = -saltodoble;
    doblesalto= true;
  } else if (key == 'd') {
    jugxander.cambio.x = vel;
  } else if (key == 'a')
    jugxander.cambio.x= -vel;

  if (key == ENTER) {
    //Si esta en el menu y presiona enter, inicia el juego.
    if (escenastart==true ) {
      escenastart = false;
      escenamainmenu = true;
    }
  }
}
public void keyReleased() {
  if (key == 'd')
    jugxander.cambio.x = 0;

  else if (key == 'a')
    jugxander.cambio.x = 0;
  else if (key == 'w')
    jugxander.cambio.y= 0;
  //Volar(Cheat)
  /*jugxander.cambio.y= -9;*/
}
public void mouseClicked() {
  //Si la persona clickea Start game
  if (escenamainmenu == true && posmouseY >175 && posmouseY <227 && posmouseX > 45 && posmouseX< 322) {
    escenamainmenu= false;
    sceneselectmode= true;
    //Si la persona presiona creditos
  } else if (escenamainmenu == true && posmouseY >336 && posmouseY <371 && posmouseX > 50 && posmouseX< 209) {
    escenamainmenu = false;
    escenacredits= true;
    //Si la persona presiona controls
  } else if (escenamainmenu== true && posmouseY >257 && posmouseY <292 && posmouseX > 59 && posmouseX< 250) {
    escenamainmenu=false;
    escenacontrols= true;
  }
  //Cuando la persona esta en el menu de creditos y presiona back
  if (escenacredits== true && posmouseY >455 && posmouseY <481 && posmouseX > 68 && posmouseX< 151) {
    escenamainmenu = true;
    escenacredits= false;
  }
  //Cuando la persona esta en el menu de controls y presiona back
  if (escenacontrols== true && posmouseY >455 && posmouseY <480 && posmouseX > 67 && posmouseX< 164) {
    escenamainmenu= true;
    escenacontrols= false;
  }
  //Cuando la persona esta en el menu de died y presiona exit
  if (escenadied==true && posmouseY >385 && posmouseY <420 && posmouseX > 347 && posmouseX< 440) {
    exit();
  }
  //Cuando la persona esta en el menu de died y presiona restart
  if (escenadied==true && posmouseY >314 && posmouseY <351 && posmouseX > 300 && posmouseX< 480) {
    reset();
    escenadied=false;
  }
  //Menu select mode y presiona normal
  if (sceneselectmode== true && posmouseY >240 && posmouseY <292 && posmouseX > 55 && posmouseX< 298 ) {
    musica[2].mute();
    musica[5].play(1);
    sceneselectmode= false;
    nivel.cambiarNivel0();
    juego = true;
  }
  //Menu select mode y presiona back
  if (sceneselectmode==true && posmouseY >473 && posmouseY <496 && posmouseX > 62 && posmouseX< 134) {
    sceneselectmode = false;
    escenamainmenu = true;
  }
  //Win screen y presiona main menu
  if (escenawin==true && posmouseY >440 && posmouseY <471 && posmouseX > 46 && posmouseX< 253) {
    escenawin= false;
    escenamainmenu= true;
    nivel.resetjuego();
  }
}
public void reset() {
  if (escenadied==true || escenawin) {
    juego=true;
    vistaP_x =0;
    vistaP_y = 0;
    jugxander.vidas = 3;
    info.puntaje= 0;
    if (lvl0 || lvl1 || lvl2) {
      nivel.cambiarNivel0();
    }
  }
  //Sala oculta en el ultimo nivel
  if (jugxander.center.y > height && lvl2== true && (jugxander.center.x >= 6276 && jugxander.center.x <= 6376)) {
    lvl2 = false;
    lvloculto= true;
    nivel.cambiarNiveloculto();
  } else if (jugxander.center.y > height) {
    musica[4].play(40);
    shift.activar();
    jugxander.center.y = 200;
    jugxander.center.x= 80;
    vistaP_x =0;
    vistaP_y = 0;
    jugxander.vidas--;
  }


  //Algunas formas de perder vida en el nivel 2.
  if (lvl2 == true && jugxander.center.y== 226 && jugxander.center.x> 1171 && jugxander.center.x <1389 ) {
    musica[4].play(1);
    shift.activar();
    jugxander.center.y = 200;
    jugxander.center.x= 80;
    vistaP_x =0;
    vistaP_y = 0;
    jugxander.vidas--;
  }
  //Algunas formas de perder vida en el nivel 2
  if (lvl2 == true && jugxander.center.y== 194) {
    if ((jugxander.center.x > 3411 && jugxander.center.x < 3437)|| (jugxander.center.x > 3507 && jugxander.center.x < 3533)||(jugxander.center.x > 3603 && jugxander.center.x < 3629)||
      (jugxander.center.x > 3699 && jugxander.center.x < 3725)|| (jugxander.center.x > 3795 && jugxander.center.x < 3821)|| (jugxander.center.x > 3923 && jugxander.center.x < 3449)) {
      musica[4].play(1);
      shift.activar();
      jugxander.center.y = 200;
      jugxander.center.x= 80;
      vistaP_x =0;
      vistaP_y = 0;
      jugxander.vidas--;
    }
  }
}

public void posicionmouse() {
  if (escenamainmenu ==true || escenacredits== true || escenacontrols==true|| escenadied==true || sceneselectmode== true|| escenawin== true) {
    posmouseX = mouseX ;
    posmouseY = mouseY;
    System.out.println ("Posicion mouse x : "+posmouseX);
    System.out.println ("Posicion mouse Y : "+posmouseY);
  }
  //Si el mouse esta sobre el menu - start game.
  if (escenamainmenu== true && posmouseY >175 && posmouseY <227 && posmouseX > 45 && posmouseX< 322) {
    image (mmstarthover, width/2, height/2);
    cursor(cursorhover);
    //Si el mouse esta sobre el menu - controles
  } else if (escenamainmenu== true && posmouseY >257 && posmouseY <292 && posmouseX > 59 && posmouseX< 250) {
    image (mmcontrolhover, width/2, height/2);
    cursor(cursorhover);
    //Si el mouse esta sobre el menu - creditos
  } else if (escenamainmenu== true && posmouseY >336 && posmouseY <371 && posmouseX > 50 && posmouseX< 209) {
    image (mmcredithover, width/2, height/2);
    cursor(cursorhover);
    //Si el mouse esta en el menu creditos - back
  } else if (escenacredits== true && posmouseY >455 && posmouseY <481 && posmouseX > 68 && posmouseX< 151) {
    image(creditmenubackhover, width/2, height/2);
    cursor(cursorhover);
    //Si el mouse esta en el menu controls - back
  } else if (escenacontrols== true && posmouseY >455 && posmouseY <480 && posmouseX > 67 && posmouseX< 164) {
    image(controlmenubackhover, width/2, height/2);
    cursor(cursorhover);
    //Si el mouse esta sobre el menu died - exit
  } else if (escenadied==true && posmouseY >385 && posmouseY <420 && posmouseX > 347 && posmouseX< 440) {
    image(dscreenexithov, width/2, height/2);
    cursor(cursorhover);
    //Si el mouse esta sobre el menu died - restart
  } else if (escenadied==true && posmouseY >314 && posmouseY <351 && posmouseX > 300 && posmouseX< 480) {
    image(dscreenreshov, width/2, height/2);
    cursor(cursorhover);
    //Si el mouse esta en el menu select mode - Normal
  } else if (sceneselectmode==true && posmouseY >240 && posmouseY <292 && posmouseX > 55 && posmouseX< 298) {
    image(normalmodehover, width/2, height/2);
    cursor(cursorhover);
    //Si el mouse esta en el menu select mode - Back...
  } else if (sceneselectmode==true && posmouseY >473 && posmouseY <496 && posmouseX > 62 && posmouseX< 134) {
    image (smbackhover, width/2, height/2);
    cursor(cursorhover);
    //si el mouse esta en win screen y presiona main menu
  } else if (escenawin==true && posmouseY >440 && posmouseY <471 && posmouseX > 46 && posmouseX< 253) {
    cursor(cursorhover);
  } else {
    cursor(cursornormal);
  }
}
//Extends para heredar todos los metodos de la clase sprite, sprite es la superclase
class Animacion extends Sprite {
  //Matriz que contiene a las imagenes
  PImage [] actual, quieto, moverIzq, moverDer;
  int dir, index, frame;
  int frameCounter = 0;
  int frameRate = 8; //Cambia de sprite cada 8 fotogramas
  Animacion (PImage img) {
    //Haciendo referencia al constructor de plataforma de la clase Sprite
    super(img, 0);
    dir = normal;
    index= 0;
    frame= 0;
  }
  public void actualizar() {
    frameCounter++;
    if (frameCounter >= frameRate) {
      frameCounter= 0;
      seleccionarDireccion();
      seleccionarImagenActual();
      avanzaImagen();
    }
  }
  public void seleccionarDireccion() {
    if (cambio.x > 0)
      dir= derecha;
    else if (cambio.x < 0)
      dir= izquierda;
    else
      dir = normal;
  }
  public void seleccionarImagenActual() {
    if (dir == izquierda){
      actual = moverIzq;
    }
    else if (dir == derecha)
      actual = moverDer;
    else
      actual = quieto;
  }
  public void avanzaImagen() {
    index++;
    if (index >= actual.length)
      index= 0;
    img = actual[index];
  }
}
class Enemigo extends Animacion
{
  PImage[] enemigoslvl1, enemigoslvl2, enemigoslvl3,enemigOculto;
  int dir, clase, daño=10;
  Enemigo(PImage ene, int esUn)
  {
    super(ene);
    shift = new Transicion();
    if (lvl0) {
      tamanio.x = 84;
      tamanio.y = 54;
    } else if (lvl1) {
      tamanio.x = 50;
      tamanio.y = 64;
    }else if (lvl2){
      tamanio.x = 48;
      tamanio.y = 48;
    }else if (lvloculto){
      tamanio.x = 84;
      tamanio.y = 84;
    }

    tipo = 1;
    clase = esUn;
    dir = izquierda;
    if(lvloculto){
      cambio.x = -4;
    }else{
      cambio.x = -1;
    }
    enemigoslvl1 = new LeerArchivo(8, 3, "Enemigoslvl1_84x54.png").getHoja();
    enemigoslvl2 = new LeerArchivo(8, 3, "Enemyslvl2_64x50.png").getHoja();
    enemigoslvl3 = new LeerArchivo(8, 3, "Enemigoslvl3x48.png").getHoja();
    enemigOculto = new LeerArchivo(8,1, "hiddenenmy.png").getHoja();
    quieto = new PImage[1];
    quieto[0] = enemigoslvl1[0];
    if (lvl0) {
      if (clase == 1)//Velociraptor
      {
        moverDer = new PImage[4];
        moverIzq = new PImage[4];
        moverIzq[0] = enemigoslvl1[0];
        moverIzq[1] = enemigoslvl1[1];
        moverIzq[2] = enemigoslvl1[2];
        moverIzq[3] = enemigoslvl1[3];
        moverDer[0] = enemigoslvl1[4];
        moverDer[1] = enemigoslvl1[5];
        moverDer[2] = enemigoslvl1[6];
        moverDer[3] = enemigoslvl1[7];
      } else if (clase == 2)//Dinosaurio verde
      {
        moverDer = new PImage[4];
        moverIzq = new PImage[4];
        moverDer[0] = enemigoslvl1[12];
        moverDer[1] = enemigoslvl1[13];
        moverDer[2] = enemigoslvl1[14];
        moverDer[3] = enemigoslvl1[15];
        moverIzq[0] = enemigoslvl1[8];
        moverIzq[1] = enemigoslvl1[9];
        moverIzq[2] = enemigoslvl1[10];
        moverIzq[3] = enemigoslvl1[11];
      }
      actual = moverIzq;
    } else if (lvl1) {
      if (clase == 1)//Romano 1 amarillo
      {
        moverDer = new PImage[4];
        moverIzq = new PImage[4];
        moverIzq[0] = enemigoslvl2[0];
        moverIzq[1] = enemigoslvl2[1];
        moverIzq[2] = enemigoslvl2[2];
        moverIzq[3] = enemigoslvl2[3];
        moverDer[0] = enemigoslvl2[4];
        moverDer[1] = enemigoslvl2[5];
        moverDer[2] = enemigoslvl2[6];
        moverDer[3] = enemigoslvl2[7];
      } else if (clase == 2)//Romano 2 azul
      {
        moverDer = new PImage[4];
        moverIzq = new PImage[4];
        moverIzq[0] = enemigoslvl2[8];
        moverIzq[1] = enemigoslvl2[9];
        moverIzq[2] = enemigoslvl2[10];
        moverIzq[3] = enemigoslvl2[11];
        moverDer[0] = enemigoslvl2[12];
        moverDer[1] = enemigoslvl2[13];
        moverDer[2] = enemigoslvl2[14];
        moverDer[3] = enemigoslvl2[15];
      } else if (clase==3) // Romano con arco
      {
        moverDer = new PImage[4];
        moverIzq = new PImage[4];
        moverIzq[0] = enemigoslvl2[16];
        moverIzq[1] = enemigoslvl2[17];
        moverIzq[2] = enemigoslvl2[18];
        moverIzq[3] = enemigoslvl2[19];
        moverDer[0] = enemigoslvl2[20];
        moverDer[1] = enemigoslvl2[21];
        moverDer[2] = enemigoslvl2[22];
        moverDer[3] = enemigoslvl2[23];
      }
    } else if (lvl2) {
      if (clase == 1)//Soldado 1
      {
        moverDer = new PImage[4];
        moverIzq = new PImage[4];
        moverIzq[0] = enemigoslvl3[0];
        moverIzq[1] = enemigoslvl3[1];
        moverIzq[2] = enemigoslvl3[2];
        moverIzq[3] = enemigoslvl3[3];
        moverDer[0] = enemigoslvl3[4];
        moverDer[1] = enemigoslvl3[5];
        moverDer[2] = enemigoslvl3[6];
        moverDer[3] = enemigoslvl3[7];
      } else if (clase == 2)//Soldado 2
      {
        moverDer = new PImage[4];
        moverIzq = new PImage[4];
        moverIzq[0] = enemigoslvl3[8];
        moverIzq[1] = enemigoslvl3[9];
        moverIzq[2] = enemigoslvl3[10];
        moverIzq[3] = enemigoslvl3[11];
        moverDer[0] = enemigoslvl3[12];
        moverDer[1] = enemigoslvl3[13];
        moverDer[2] = enemigoslvl3[14];
        moverDer[3] = enemigoslvl3[15];
      } else if (clase==3) // Soldado 3 Juggernaut
      {
        moverDer = new PImage[4];
        moverIzq = new PImage[4];
        moverIzq[0] = enemigoslvl3[16];
        moverIzq[1] = enemigoslvl3[17];
        moverIzq[2] = enemigoslvl3[18];
        moverIzq[3] = enemigoslvl3[19];
        moverDer[0] = enemigoslvl3[20];
        moverDer[1] = enemigoslvl3[21];
        moverDer[2] = enemigoslvl3[22];
        moverDer[3] = enemigoslvl3[23];
      }
    }else if (lvloculto){
      moverDer = new PImage[4];
        moverIzq = new PImage[4];
        moverIzq[0] = enemigOculto[4];
        moverIzq[1] = enemigOculto[5];
        moverIzq[2] = enemigOculto[6];
        moverIzq[3] = enemigOculto[7];
        moverDer[0] = enemigOculto[0];
        moverDer[1] = enemigOculto[1];
        moverDer[2] = enemigOculto[2];
        moverDer[3] = enemigOculto[3];
    }
  }
  @Override public 
    void mover() {
    actualizar();
    resolverColision(this, plataforma);
    if (tocado(jugxander, this)) {
      swdaño = true;
      if (daño==10) {
        if ( num == 50 || num== 51 || num==52) {
          
          System.out.println("SwitchDañoEncolision"+swdaño);
          musica[4].play(1);
          jugxander.vidas--;
        }
        daño--;
      }
    } else {
      daño= 10;
    }
    //System.out.println("SwitchDaño"+swdaño);
  }
  public void invertir()
  {
    if (dir == izquierda)
    {
      dir = derecha;
      if(lvloculto){
        cambio.x= 4;
      }else{
      cambio.x = 1.5f;
      }
    } else if (dir == derecha)
    {
      dir = izquierda;
      if(lvloculto){
        cambio.x= -4;
      }else{
      cambio.x = -1.5f;
      }
    }
  }
}
class Fondo {
  PImage mySprite[], FondoImagen;
  float sizeSprite;
  Fondo (String name, String tilemap, float size) {
    sizeSprite = size;
    mySprite =new LeerArchivo(4, 5, tilemap).getHoja();
    plataforma = new ArrayList<Sprite>();
    coin = new ArrayList<Sprite>();
    lava = new ArrayList <Sprite>();
    enemigo = new ArrayList<Sprite>();
    if (lvl0) {
      FondoImagen = loadImage("bg1.png");
      crearPlataforma(name);
    } else if (lvl1) {
      FondoImagen = loadImage("bg2.png");
      crearPlataforma(name);
    } else if (lvl2 || lvloculto) {
      FondoImagen = loadImage("bg3.png");
      crearPlataforma(name);
    }
  }
  public void mostrar() {
    image(FondoImagen, vistaP_x+width/2, height/2+1);
    for (Sprite p : plataforma)
      p.mostrar();
    for (Sprite m : coin) {
      m.mostrar();
      ((Animacion)m).actualizar();
    }
    ArrayList<Sprite> recoleccion = tocandoLista(jugxander, coin);
    if (recoleccion.size() > 0) {
      for (Sprite r : recoleccion) {
        musica[0].setGain(-10);
        musica[0].play(50);
        juntar.add(new Recolectar(r.center.x, r.center.y));
        coin.remove(r);
        info.sumar();
      }
    }
    for (Sprite e : enemigo)
    {
      e.mostrar();
      e.mover();
    }
  }
  public void crearPlataforma(String archivo) {
    String[] lineas = loadStrings(archivo);
    for (int row = 0; row < lineas.length; row++ ) {
      String[] valores = split(lineas[row], ";");
      for (int col=0; col < valores.length; col++) {
        int num= obtenerNum(valores[col]);
        if (num < 16) {
          Sprite s = new Sprite(mySprite[num], num);
          s.center.x = sizeSprite/2 + col*sizeSprite;
          s.center.y = sizeSprite/2 + row*sizeSprite;
          plataforma.add(s);
        } else if (num == 16) {
          Lava l = new Lava(mySprite[num], mySprite[num+1]);
          l.center.x = sizeSprite/2 + col*sizeSprite;
          l.center.y = sizeSprite/2 + row*sizeSprite;
          lava.add(l);
        } else if (num == 19) {
          Moneda c = new Moneda(mySprite[num], 0);
          c.center.x = sizeSprite/2 + col * sizeSprite;
          c.center.y = sizeSprite/2 + row * sizeSprite;
          coin.add(c);
        }
        //Añadiendo enemigos para todos los niveles
        if (num==50) { // Tipo 1 de enemigo
          Enemigo n = new Enemigo(mySprite[18], 1);
          n.center.x = sizeSprite/2 + col * sizeSprite;
          n.center.y = sizeSprite/2 + row * sizeSprite;
          n.tipo = 1;
          n.num = 50;
          enemigo.add(n);
        } else
          if (num == 51) { //Tipo 2 de enemigo
            Enemigo n = new Enemigo(mySprite[18], 2);
            n.center.x = sizeSprite/2 + col * sizeSprite;
            n.center.y = sizeSprite/2 + row * sizeSprite;
            n.tipo = 2;
            n.num = 51;
            enemigo.add(n);
          } else if (num==52) {//Tipo 3 de enemigo
            Enemigo n = new Enemigo(mySprite[18], 3);
            n.center.x = sizeSprite/2 + col * sizeSprite;
            n.center.y = sizeSprite/2 + row * sizeSprite;
            n.tipo = 3;
            n.num = 52;
            enemigo.add(n);
          }
      }
    }
  }



  public int obtenerNum(String txt) {
    int num = 0;
    num = Integer.valueOf(txt);
    return num;
  }
}
class Informacion {
  PImage[] img, imgcoincount;
  int puntaje, segundos;
  PImage hp3, hp2, hp1;
  PFont fuente;

  Informacion() {
    hp3 = loadImage("3hp.png");
    hp2 = loadImage("2hp.png");
    hp1 = loadImage("1hp.png");
    fuente = createFont("Minecraft.ttf", 20);
    puntaje = 0;
    segundos= 0;
  }
  public void mostrar() {
    imgcoincount = new LeerArchivo (1, 1, "coincount64.png").getHoja();
    if (lvl0 || lvl1 || lvl2 || lvloculto ) {
      if (jugxander.vidas==3) {
        image(hp3, vistaP_x+110, 65, 192, 192);
      } else if (jugxander.vidas == 2) {
        image(hp2, vistaP_x+110, 65, 192, 192);
      } else if (jugxander.vidas==1) {
        image(hp1, vistaP_x+110, 65, 192, 192);
      }
      fill(0);
      String txt = nf(puntaje, 2);
      textFont(fuente);
      text ("x"+txt, vistaP_x+78, 130);
      image (imgcoincount [jugxander.estado], vistaP_x+53, 125);
      
    }
  }
  public void sumar() {
    puntaje++;
    if (puntaje % 10 == 0 && jugxander.vidas <3) {
      jugxander.vidas++;
    }
  }
  public void winscreendata() {

    fill(255);
    textFont(fuente);
    textSize(60);
    text("Score: "+puntaje, 270, 251);
    textSize(90);
    text("¡YOU WIN!", 180, 150);
  }
}
class JugadorXander extends Animacion
{
  int vidas, estado, timer;
  boolean enPlataforma, enPiso;
  PImage[] quietoDer, quietoIzq, saltoDer, dmgDer, die, saltodobleder, saltoIzq, dmgIzq, saltodobleizq;
  JugadorXander (PImage imagen) {
    super(imagen);
    vidas = 3;
    timer = 0;
    dir = derecha;
    enPlataforma = false;
    enPiso = false;
    //PImages con la cantidad de sprites de la animacion
    quietoDer = new PImage[2];
    quietoIzq = new PImage[2];
    moverDer = new PImage[4];
    saltoDer = new PImage[4];
    dmgDer = new PImage[2];
    saltodobleder = new PImage[4];
    die = new PImage[6];
    moverIzq = new PImage[4];
    saltoIzq = new PImage[4];
    dmgIzq = new PImage[2];
    saltodobleizq = new PImage[4];
    cargarAnimacion();
    actual= moverDer;
  }
  public void cargarAnimacion() {
    timer = 0;
    //Animaciones para la derecha
    quietoDer[0]= personaje1[0];
    quietoDer[1]= personaje1[1];
    moverDer[0] = personaje1[6];
    moverDer[1] = personaje1[7];
    moverDer[2] = personaje1[8];
    moverDer[3] = personaje1[9];
    saltoDer[0]= personaje1[12];
    saltoDer[1]= personaje1[13];
    saltoDer[2]= personaje1[14];
    saltoDer[3]= personaje1[15];
    dmgDer[0]= personaje1[18];
    dmgDer[1]= personaje1[19];
    die[0]= personaje1 [24];
    die[1]= personaje1 [25];
    die[2]= personaje1 [26];
    die[3]= personaje1 [27];
    die[4]= personaje1 [28];
    die[5]= personaje1 [29];
    saltodobleder[0]= personaje1[24];
    saltodobleder[1]= personaje1[25];
    saltodobleder[2]= personaje1[26];
    saltodobleder[3]= personaje1[27];

    //Animaciones para la izquierda
    quietoIzq[0]= personaje1[36];
    quietoIzq[1]= personaje1[37];
    moverIzq[0] = personaje1[42];
    moverIzq[1] = personaje1[43];
    moverIzq[2] = personaje1[44];
    moverIzq[3] = personaje1[45];
    saltoIzq[0]= personaje1[48];
    saltoIzq[1]= personaje1[49];
    saltoIzq[2]= personaje1[50];
    saltoIzq[3]= personaje1[51];
    dmgIzq[0]= personaje1[54];
    dmgIzq[1]= personaje1[55];
    saltodobleizq[0]= personaje1[60];
    saltodobleizq[1]= personaje1[61];
    saltodobleizq[2]= personaje1[62];
    saltodobleizq[3]= personaje1[63];
  }
  @Override public 
    void actualizar() {
    enPlataforma= estaEnPlataforma(this, plataforma);
    enPiso = cambio.x == 0 && cambio.y == 0;
    super.actualizar();
  }
  @Override public 
    void seleccionarDireccion() {
    if (cambio.x > 0)
      dir= derecha;
    else if (cambio.x < 0)
      dir = izquierda;
  }
  @Override public 
    void seleccionarImagenActual() {
    if (swdaño) {
        if (dir == derecha) {
            actual = dmgDer;
            swdaño= false;
        } else if (dir == izquierda) {
            actual = dmgIzq;
            swdaño= false;
        }
    } else {
        if (dir == derecha) {
            if (enPiso) {
                actual = quietoDer;
            } else if (!enPlataforma) {
                actual = saltoDer;
            } else {
                actual = moverDer;
            }
        } else if (dir == izquierda) {
            if (enPiso) {
                actual = quietoIzq;
            } else if (!enPlataforma) {
                actual = saltoIzq;
            } else {
                actual = moverIzq;
            }
        }
    }
  }
}
class Lava extends Animacion
{
  Lava (PImage uno, PImage dos){
    super (uno);
    quieto = new PImage [2];
    quieto[0]= uno;
    quieto[1]= dos;
    actual = quieto;
  }
}
/* Esta clase permite cargar una imagen que contiene una cuadrícula de sprites, 
dividirla en sprites individuales y almacenarlos en un array para su posterior uso. */
class LeerArchivo
{
  int colSprite, rowSprite, totalSprite;
  PImage[] mySprite;
  
  LeerArchivo(int col, int row, String name){
    colSprite = col;
    rowSprite= row;
    totalSprite = col * row;
    mySprite = new PImage [totalSprite];
    PImage hoja = loadImage(name);
    int ancho = hoja.width/colSprite;
    int alto = hoja.height/rowSprite;
    int pos= 0;
    for (int y= 0; y<rowSprite; y++){
      for(int x = 0; x < colSprite; x++){
        mySprite[pos]= hoja.get(x*ancho,y*alto,ancho,alto);
        pos++;
      }
    }
  }
  public PImage[] getHoja(){
    return mySprite;
  }
}
class Moneda extends Animacion{
  int tipo;
  Moneda (PImage img, int _tipo){
    super (img);
    tipo = _tipo;
    quieto = new LeerArchivo (4,1,"CoinRotation32.png").getHoja();
    actual = quieto;
  }
}
class Nivel {
  Fondo lv1;
  PImage bgFondo;
  int mapa;
  Nivel() {
    lv1 = new Fondo("map0.csv", "Tiles0x32.png", 32);
  }
  public void mostrar() {
    lv1.mostrar();
  }
  //Metodo para reiniciar todo cuando pierde el jugador
  public void resetjuego() {
    lvl0= true;
    lvl1= false;
    lvl2= false;
    lvloculto = false;
    musica[2].rewind();
    musica[2].unmute();
    musica[2].play(1);
    musica[3].mute();
    musica[9].mute();
    jugxander.vidas =3;
    //Para pruebas *6700 * 70
    info.puntaje= 0;
    jugxander.center.x = 70;
    jugxander.center.y = 200;
    vistaP_x=0;
    
  }
  public void cambiarNivel0() {
    scenecambiolvl1= true;
    musica[8].pause();
    musica[5].rewind();
    musica[5].unmute();
    musica[5].play();
    musica[6].mute();
    musica[7].mute();
    lvl0=true;
    lvl1= false;
    lvl2= false;
    plataforma.removeAll(plataforma);
    coin.removeAll(coin);
    lava.removeAll(lava);
    enemigo.removeAll(enemigo);
    jugxander.vidas =3;
    //Para pruebas *6700 * 70
    info.puntaje= 0;
    jugxander.center.x =70;
    jugxander.center.y = 200;
    vistaP_x=0;
    lv1 = new Fondo("map0.csv", "Tiles0x32.png", 32);
  }
  public void cambiarNivel1() {
    musica[5].mute();
    musica[6].rewind();
    musica[6].unmute();
    musica[6].play();
    lvl1= true;
    lvl0= false;
    lvl2= false;
    plataforma.removeAll(plataforma);
    coin.removeAll(coin);
    lava.removeAll(lava);
    enemigo.removeAll(enemigo);
    jugxander.vidas =3;
    //Para pruebas *6700 * 70
    jugxander.center.x = 70;
    jugxander.center.y = 200;
    vistaP_x=0;
    lv1 = new Fondo("map1.csv", "Tiles1x32.png", 32);
  }
  public void cambiarNivel2() {
    der_margen= 400;

    if (lvloculto) {
      jugxander.center.x =6510;
      jugxander.center.y = 2;
    } else {
      musica[6].mute();
      musica[7].rewind();
      musica[7].unmute();
      musica[7].play();
      lvl2=true;
      lvl0= false;
      lvl1= false;
      plataforma.removeAll(plataforma);
      coin.removeAll(coin);
      lava.removeAll(lava);
      enemigo.removeAll(enemigo);
      jugxander.vidas =3;
      jugxander.center.x =70;
      jugxander.center.y = 200;
    }
    vistaP_x=0;
    lv1 = new Fondo("map2.csv", "Tiles2x32.png", 32);
  }
  public void cambiarNiveloculto() {
    der_margen=0;
    lvl2=false;
    lvl0= false;
    lvl1= false;
    plataforma.removeAll(plataforma);
    coin.removeAll(coin);
    lava.removeAll(lava);
    enemigo.removeAll(enemigo);
    jugxander.vidas =3;
    jugxander.center.x =60;
    jugxander.center.y = 200;
    vistaP_x=0;
    lv1 = new Fondo("mapoculto.csv", "Tiles2x32.png", 32);
  }
  
}
class Recolectar {
  PVector center;
  PImage []img;
  int pos;
  boolean estado;
  int frameCounter = 0;
  int frameRate = 5; //Cambia de sprite cada 5 fotogramas
  Recolectar (float x, float y) {
    img = new PImage[5];
    center = new PVector (x, y);
    pos = 0;
    estado = true;
    img[0] = collected[0];
    img[1] = collected[1];
    img[2] = collected[2];
    img[3] = collected[3];
    img[4] = collected[4];
  }
  public void mostrar() {
    if (estado) {
      frameCounter++;
      if(frameCounter >= frameRate){
        frameCounter = 0;
        pos++;
      }
      if (pos < 5)
        image (img[pos], center.x, center.y);
      if (pos> 4) {
        pos = 0;
        estado = false;
      }
    }
  }
}
class Sprite{
  PImage img;
  PVector center, cambio, tamanio;
  int tipo, num;
  Sprite (PImage archivo, int pared){
    img= archivo;
    tamanio= new PVector (img.width,img.height);
    center= new PVector (0,0);
    cambio= new PVector (0,0);
    tipo = 0;
    num= pared;
  }
 
  public void mostrar(){
    image(img,center.x,center.y);
  }
  public void mover(){
    center.x += cambio.x;
    center.y += cambio.y;
  }
  //
  public void setLeft(float left){
    center.x = left + tamanio.x/2;
  }
  public float getLeft(){
    return center.x - tamanio.x/2;
  }
  
  public void setRight(Float right){
    center.x = right -tamanio.x/2; 
  }
  public float getRight(){
   return center.x + tamanio.x/2; 
  }
  
  public void setTop(float top){
    center.y = top + tamanio.y/2;
  }
  public float getTop(){
    return center.y - tamanio.y/2;
  }
  
  public void setBottom (float bottom){
    center.y = bottom - tamanio.y/2;
  }
  public float getBottom(){
    return center.y + tamanio.y/2;
  }
}
//Cuando muere el jugador
class Transicion{
  int tamanio;
  boolean visible;
  Transicion()
  {
    tamanio = 1;
    visible= false;
  }
  public void activar(){
    tamanio = 1;
    visible = true;
  }
  public boolean desactivado(){
    if(tamanio >=150){
      visible = false;
      return false;
    }else{
      return true;
    }
  }
  public void dibujar(){
    fill(0xFF030303,200);
    for(int y= 0; y< height+80;y+=80){
      for(int x = 0; x < width+80; x+=80){
        circle(x,y,tamanio);
      }
    }
  }
  public void mostrar(){
    if(desactivado()){
      dibujar();
      tamanio+=5;
    }
  }
}


  public void settings() { size(800, 511); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Proyecto_Videojuego_Algoritmia_2" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
